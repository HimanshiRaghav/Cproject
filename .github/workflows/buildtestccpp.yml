name: C/C++ Building and Testing

on:
  workflow_call:
    inputs:
      compiler:
        description: Compiler either gcc or clang
        required: true
        type: string
      build-system:
        description: Build system either make or cmake
        required: true
        type: string

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      compiler: ${{ inputs.compiler }}
      build-system: ${{ inputs.build-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  validate-inputs:
    runs-on: isg-ocp-x86-small
    needs: checkout
    steps:
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.compiler }}" != "gcc" && "${{ inputs.compiler }}" != "clang" ]]; then 
            echo "Invalid compiler: ${{ inputs.compiler }}"
            exit 1
          fi
          if [[ "${{ inputs.build-system }}" != "make" && "${{ inputs.build-system }}" != "cmake" ]]; then
            echo "Invalid build system: ${{ inputs.build-system }}"
            exit 1
          fi

  install-compiler:
    runs-on: isg-ocp-x86-small
    needs: validate-inputs
    steps:
      - name: Install compiler
        run: |
          sudo apt-get update
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            sudo apt-get install -y build-essential
          else
            sudo apt-get install -y clang make
          fi

  configure-env:
    runs-on: isg-ocp-x86-small
    needs: install-compiler
    steps:
      - name: Configure environment variables
        run: |
          if [[ "${{ inputs.compiler }}" == "clang" ]]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi

  install-cmake:
    runs-on: isg-ocp-x86-small
    needs: configure-env
    if: ${{ inputs.build-system == 'cmake' }}
    steps:
      - name: Install CMake
        run: sudo apt-get install -y cmake

  build-cmake:
    runs-on: isg-ocp-x86-small
    needs: install-cmake
    if: ${{ inputs.build-system == 'cmake' }}
    steps:
      - name: Build with CMake
        run: |
          mkdir -p build logs
          cd build
          cmake .. > ../logs/cmake_configure.log 2>&1
          make > ../logs/cmake_build.log 2>&1

  build-make:
    runs-on: isg-ocp-x86-small
    needs: configure-env
    if: ${{ inputs.build-system == 'make' }}
    steps:
      - name: Build with Make
        run: |
          mkdir -p logs
          make > logs/make_build.log 2>&1

  run-linter:
    runs-on: isg-ocp-x86-small
    needs: [build-cmake, build-make]
    steps:
      - name: Run C++ Linter (cppcheck)
        run: |
          sudo apt-get update && sudo apt-get install -y cppcheck
          cppcheck --enable=all --inconclusive --quiet .

  run-tests:
    runs-on: isg-ocp-x86-small
    needs: [build-cmake, build-make]
    outputs:
      test_status: ${{ steps.test_step.outcome }}
    steps:
      - name: Run Unit Tests
        id: test_step
        run: |
          mkdir -p logs
          make print-debug || true
          if [ ! -f "./test_exec" ]; then
            echo "test_exec not found"
          else
            echo " test_exec is being found "
          fi
          if [ -f "./run_tests.sh" ]; then
            chmod +x ./run_tests.sh
            ./run_tests.sh > logs/test_output.log 2>&1
            echo "Exit Code: $?" >> logs/test_output.log
          elif [ -f "./test_exec" ]; then
            chmod +x ./test_exec
            ./test_exec > logs/test_output.log 2>&1
            echo "Exit Code: $?" >> logs/test_output.log
          else
            echo "No test executable or test script found." > logs/test_output.log
            exit 1
          fi

  store-logs:
    runs-on: isg-ocp-x86-small
    needs: run-tests
    if: always()
    steps:
      - name: Store build and test logs
        run: |
          mkdir -p logs
          find build -name "*.log" -exec cp {} logs/ \; 2>/dev/null || true
          find . -maxdepth 1 -name "*.log" -exec cp {} logs/ \; 2>/dev/null || true

  upload-logs:
    runs-on: isg-ocp-x86-small
    needs: store-logs
    if: always()
    steps:
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: build-and-test-logs
          path: logs/

  summarize:
    runs-on: isg-ocp-x86-small
    needs: [build-cmake, build-make, run-tests]
    if: always()
    steps:
      - name: Summarize Build and Test Results
        run: |
          echo "## Build and Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.build-system }}" == "cmake" ]; then
            if [ "${{ needs.build-cmake.result }}" == "failure" ]; then
              echo "| Build (CMake) | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Build (CMake) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ inputs.build-system }}" == "make" ]; then
            if [ "${{ needs.build-make.result }}" == "failure" ]; then
              echo "| Build (Make) | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Build (Make) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          if grep -q "No test executable or test script found" logs/test_output.log; then
            echo "| Tests | ⚠️ Not Found |" >> $GITHUB_STEP_SUMMARY
          elif grep -i "error:" logs/test_output.log || grep -i "fail" logs/test_output.log; then
            echo "| Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          fi
