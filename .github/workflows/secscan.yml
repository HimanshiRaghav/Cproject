name: Security Scan

on:
  workflow_call:
    inputs:
      compiler:
        description: Compiler either gcc or clang
        required: true
        type: string
      build-system:
        description: Build system either make or cmake
        required: true
        type: string

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  security-scans:
    runs-on: ubuntu-latest
    env:
      BUILD_SYSTEM: ${{ inputs.build-system }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate inputs
        run: |
          if [[ "${{ inputs.compiler }}" != "gcc" && "${{ inputs.compiler }}" != "clang" ]]; then 
            echo "Invalid compiler: ${{ inputs.compiler }}"
            exit 1
          fi
          if [[ "${{ inputs.build-system }}" != "make" && "${{ inputs.build-system }}" != "cmake" ]]; then
            echo "Invalid build system: ${{ inputs.build-system }}"
            exit 1
          fi

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang cppcheck valgrind clang-tools
          if [[ "${{ inputs.compiler }}" == "gcc" ]]; then
            sudo apt-get install -y build-essential
          else
            sudo apt-get install -y clang make
          fi

      - name: Configure Compiler environment
        run: |
          if [[ "${{ inputs.compiler }}" == "clang" ]]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi

      - name: Run C++ Linter (cppcheck)
        run: |
          cppcheck --enable=all --inconclusive --quiet . || true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: c,cpp
          build-mode: manual

      - name: Initialize CodeQL Database
        run: |
          CODEQL=$(find /opt/hostedtoolcache/CodeQL -type f -name codeql | head -n 1)
          echo "Using CodeQL CLI: $CODEQL"
          echo "CODEQL=$CODEQL" >> $GITHUB_ENV
          export CODEQL=$CODEQL
          echo "CODEQL_DATABASE=cpp-codeql-db" >> $GITHUB_ENV
          $CODEQL database init cpp-codeql-db --language=cpp --source-root=.

      - name: Build with Make and Trace
        if: ${{ inputs.build-system == 'make' }}
        run: |
          $CODEQL database trace-command cpp-codeql-db bash -c "make clean || true && make VERBOSE=1"

      - name: Build with CMake and Trace
        if: ${{ inputs.build-system == 'cmake' }}
        run: |
          mkdir -p build && cd build
          $CODEQL database trace-command ../cpp-codeql-db bash -c "cmake .. && make VERBOSE=1"

      - name: Finalize CodeQL database
        run: |
          $CODEQL database finalize cpp-codeql-db

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload CodeQL Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-logs
          path: |
            cpp-codeql-db/log
            cpp-codeql-db/tracing

      - name: Upload Static Scan Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-scan-logs
          path: logs/
